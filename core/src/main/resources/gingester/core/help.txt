Gingester - generic ingest framework

General usage:

    <> mark placeholders, [] mark optionals

    -cf/--cli-file <path/to/file> [<parameters>]
        add cli from file, supports Freemarker square-bracket-tag/square-bracket-interpolation templating
        provide [<parameters>] in JSON syntax to be used as template data

    -cr/--cli-resource <path/to/resource> [<parameters>]
        add cli from resource, supports Freemarker square-bracket-tag/square-bracket-interpolation templating
        provide [<parameters>] in JSON syntax to be used as template data

    -d/--debug
        get more detailed exception information at the cost of performance

    -e/--excepts [<link1> [<link2> [...]]]
        catch uncaught exceptions from the previous transformer and downstream
        exceptions are routed to the builtin error logging transformer if no links are provided
        provide [<link1> [<link2> [...]]] to route the exceptions to those links

    -f/--fetch [<name>]
        fetch value from stash by name

    -fa/--fetch-all [<name>]
        fetch all values from stash by name

    -gs/--graceful-sigint
        enable graceful handling of sigint

    -h/--help
        print this help and exit

    -l/--links <link1> [<link2> [...]]
        link the previous transformer to the given links, it will not automatically link to the next transformer

    -r/--report
        the interval in seconds at which to report throughput, 0 to disable

    -s/--stash [<name>]
        stash value

    -sf/--sync-from <link1> [<link2> [...]]
        mark the linked transformers to be synced with when -stt or -stft is used later

    -sft/--sync-from-transformer [<workers>][.[<queueSize>][.<maxBatchSize>]] [<id>:]<name>[!] [<parameters>]
        equal to -t but marks the transformer to be synced with when -stt or -stft is used later

    -stft/--sync-to-and-from-transformer
            [<workers>][.[<queueSize>][.<maxBatchSize>]] [<id>:]<name>[!] [<parameters>]
        equal to -t but syncs the transformer with those most recently marked by -sf, -sft or -stft, or the
        ingest-seed if there are no marks, also marks the transformer to be synced with when -stt or -stft is
        used later

    -stt/--sync-to-transformer [<workers>][.[<queueSize>][.<maxBatchSize>]] [<id>:]<name>[!] [<parameters>]
        equal to -t but syncs the transformer with those most recently marked by -sf, -sft or -stft, or the
        ingest-seed if there are no marks

    -t/--transformer [<workers>][.[<queueSize>][.<maxBatchSize>]] [<id>:]<name>[!] [<parameters>]
        add transformer to the pipeline
        provide [<workers>] to enable async execution for the transformer by the provided number of workers
        provide [<queueSize>] to set the queue size for this transformer
        provide [<maxBatchSize>] to limit the maximum batch size for this transformer
        provide [<id>] to be able to refer to this transformer by the provided id
        provide [!] to enable throughput reporting for the transformer
        provide [<parameters>] to configure the transformer

    -w/--swap [<name>]
        stash value and fetch previous value

    --
        prevent the previous transformer from automatically being linked to the next transformer

    + <comment>
        has no effect, <comment> must be a single argument

    ++ <comment> ++
        has no effect, <comment> may be multiple arguments


Terminology:

    Seed

        To start a flow Gingester creates a Seed transformer that outputs a single item and is linked to all
        transformers that do not have any incoming links.

    Synchronization

        Some transformers can synchronize with the output of an upstream transformer.

        Given the instructions `-t PathSearch '*.csv' -t DsvToJson -t Join -t PathWrite all.ndjson` assume that
        PathSearch finds 3 CSV files, each containing a header and 100 records. DsvToJson will output 300 JSON
        objects which will all be joined together and written to the file `all.ndjson`.

        To get an output file for each input file, Join needs to be in sync with the output of PathSearch, like
        so: `-sft PathSearch '*.csv' -t DsvToJson -stt Join -t PathWrite '${path.tail}.ndjson'`. Now the
        synced-to Join will create a separate output for each output of the synced-from PathSearch. Because Join
        is in sync with PathSearch its downstream has access to the PathSearch context, which is used in the
        PathWrite filename.

        When a transformer requires synchronization but is not instructed to be in sync with anything, as in the
        second paragraph of this section, it is synced with the seed (see previous section).

        Grouping is a special form of synchronization where multiple items flowing through a grouping
        transformer are assigned the same synchronization context. This differs from normal synchronization
        where each item leaving the synced-from transformer gets its own synchronization context. For example,
        the GroupByCountLimit transformer counts the items flowing through it and assigns them the same
        synchronization context until it hits the given limit, at which point it switches to a new
        synchronization context. A synced-to ListCollect transformer would then output a list for every group.
